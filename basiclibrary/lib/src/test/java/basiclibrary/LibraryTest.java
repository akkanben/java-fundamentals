/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test
    void test_roll() {
        int testSize = 10;
        int[] arr = Library.roll(testSize);
        assertEquals(testSize, arr.length);
        for (int element : arr)
            assert(element > 0 && element <= 6);
    }

    @Test
    void test_containsDuplicates() {
        int[] dupes = {4, 1, 32, 51, 22, 32, 9};
        int[] noDupes = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int[] firstTwoDupes = {5, 5, 65, 23, 12, 14, 21};
        int[] lastTwoDupes = {1, 2, 3, 4, 5, 6, 7, 8, 9, 9};
        int[] firstLastDupes = {5, 34, 12, 41, 22, 51, 5};
        int[] emptyArr = {};
        assert(Library.containsDuplicates(dupes));
        assert(!Library.containsDuplicates(noDupes));
        assert(Library.containsDuplicates(firstTwoDupes));
        assert(!Library.containsDuplicates(emptyArr));
        assert(Library.containsDuplicates(lastTwoDupes));
        assert
    }

    @Test
    void test_average() {
        int[] numsA = {90, 95, 89, 55, 100};
        int[] numsB = {5, 5, 5, 5, 1};
        int[] numsC = {100, 100, 100, 0};
        //assert(Library.average(numsA) < 85.800001 && Library.average(numsA) > 85.79999);
        // I thought we might need to compare in this way based on lecture but the below tests passed np.
        assert(Library.average(numsA) == 85.8);
        assert(Library.average(numsB) == 4.2);
        assert(Library.average(numsC) == 75.0);
    }

    @Test
    void test_lowest_average() {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61}, // lowest at 57
                {65, 56, 55, 52, 55, 62, 57}
        };
        int[][] studentGrades= {
                {86, 99, 87, 89, 78, 87, 90},
                {97, 75, 65, 90, 79, 95, 91},
                {85, 94, 66, 57, 87, 56, 66},
                {98, 96, 100, 95, 95, 92, 100, 88},
                {12, 41, 11, 0, 22, 39, 24, 12, 44, 12, 89} // lowest average
        };
        assert(Library.lowestAverage(weeklyMonthTemperatures) == weeklyMonthTemperatures[2]);
        assert(Library.lowestAverage(studentGrades) == studentGrades[4]);
    }
}

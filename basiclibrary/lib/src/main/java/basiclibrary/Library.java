/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {

    // LAB 02
    public int[] roll(int n) {
        int[] output = new int[n];
        Random rand = new Random();
        for(int i = 0; i < n; i++) {
            output[i] = rand.nextInt(1,7);
        }
        return output;
    }

    public boolean containsDuplicates(int[] arr) {
        for(int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j])
                    return true;
            }
        }
        return false;
    }

    public double average(int[] arr) {
        int sum = 0;
        for (int element : arr)
            sum += element;
        return (double) sum / arr.length;
    }

    public int[] lowestAverage(int[][] arr) {
        int index = 0;
        double lowestAverage = average(arr[0]);
        double currentAverage = lowestAverage;
        for (int i = 0; i < arr.length; i++) {
            currentAverage = average(arr[i]);
            if (currentAverage < lowestAverage) {
                lowestAverage = currentAverage;
                index = i;
            }
        }
        return arr[index];
    }

    // LAB 3
    public String findMissingTemperatures(int[][] arr) {
        String output = "";
        int highTemp = arr[0][0];
        int lowTemp = arr[0][0];
        HashSet<Integer> uniqueTemperaturesSet = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
               if (arr[i][j] > highTemp)
                   highTemp = arr[i][j];
               if (arr[i][j] < lowTemp)
                   lowTemp = arr[i][j];
               uniqueTemperaturesSet.add(arr[i][j]);
            }
        }
        System.out.println("\n~~ Analyzing Weather Data ~~");
        System.out.println("High: " + highTemp);
        System.out.println("Low: " + lowTemp);
        for (int i = lowTemp; i <= highTemp; i++) {
            if (uniqueTemperaturesSet.contains(i))
                output += i + " ";
            else
                System.out.println("Never saw temperature: " + i);
        }
        return output;
    }

    public String tally(List<String> votesList) {
       String winner = "";
       Map<String, Integer> votesCountMap = new HashMap<>();
       Set<String> uniqueVotesSet = new HashSet<>();
       for(String vote : votesList) {
           if (votesCountMap.containsKey(vote)) {
               int currentTally = votesCountMap.get(vote);
               votesCountMap.replace(vote, currentTally + 1);
           } else {
              uniqueVotesSet.add(vote);
              votesCountMap.put(vote, 1);
           }
       }
       int highest = 0;
       for(String vote : uniqueVotesSet) {
           if (votesCountMap.get(vote) > highest) {
               highest = votesCountMap.get(vote);
               winner = vote;
           }
       }
       return winner;
    }

}
